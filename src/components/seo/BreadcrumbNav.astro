---
interface Props {
  className?: string;
  showHome?: boolean;
}

const { className = "bg-gray-50 py-3 hidden", showHome = true } = Astro.props;
const { pathname } = Astro.url;

// Generate breadcrumb navigation
const generateBreadcrumbs = (pathname: string) => {
  const segments = pathname.split("/").filter(Boolean);
  const breadcrumbs = [];

  if (showHome) {
    breadcrumbs.push({
      name: "Home",
      url: "/",
      current: pathname === "/",
    });
  }

  let currentPath = "";
  segments.forEach((segment, index) => {
    currentPath += `/${segment}`;
    let name =
      segment.charAt(0).toUpperCase() + segment.slice(1).replace(/-/g, " ");

    // Custom names for specific pages
    const pageNames: { [key: string]: string } = {
      about: "About Us",
      apply: "Apply for Scholarship",
      donate: "Donate",
      speedway: "Speedway Flight Training",
      "contact-us": "Contact Us",
      "privacy-policy": "Privacy Policy",
      "terms-of-service": "Terms of Service",
    };

    if (pageNames[segment]) {
      name = pageNames[segment];
    }

    breadcrumbs.push({
      name: name,
      url: currentPath,
      current: index === segments.length - 1,
    });
  });

  return breadcrumbs;
};

const breadcrumbs = generateBreadcrumbs(pathname);
---

{
  breadcrumbs.length > 1 && (
    <nav class={className} aria-label="Breadcrumb navigation">
      <div class="mx-auto max-w-7xl px-6 lg:px-8">
        <ol class="flex items-center space-x-2 text-sm">
          {breadcrumbs.map((crumb, index) => (
            <li class="flex items-center">
              {index > 0 && (
                <svg
                  class="h-4 w-4 text-gray-400 mx-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              )}
              {crumb.current ? (
                <span class="text-gray-900 font-medium" aria-current="page">
                  {crumb.name}
                </span>
              ) : (
                <a
                  href={crumb.url}
                  class="text-primary-600 hover:text-primary-800 transition-colors duration-200"
                  title={`Navigate to ${crumb.name}`}
                >
                  {crumb.name}
                </a>
              )}
            </li>
          ))}
        </ol>
      </div>
    </nav>
  )
}

<style>
  nav a:hover {
    @apply underline;
  }
</style>
